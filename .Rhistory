rename("Cost"= "median",
"Lower Bound" = "X5.",
"Upper Bound" = "X95.") %>%
mutate(across(c(Cost,`Lower Bound`, `Upper Bound`),~round(.x/10^6,1)))
CostTable
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename("Cost"= "median",
"Lower Bound" = "X5.",
"Upper Bound" = "X95.") %>%
mutate(across(c(Cost,`Lower Bound`, `Upper Bound`),~round(.x/10^6,2)))
CostTable
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename("Cost (m AUD)"= "median",
"Lower Bound" = "X5.",
"Upper Bound" = "X95.") %>%
mutate(across(c(`Cost (m AUD)`,`Lower Bound`, `Upper Bound`),~round(.x/10^6,2)))
Measures <- unique(CostTable$CostItem)
CostTable
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename("Cost (million AUD)"= "median",
"Lower Bound" = "X5.",
"Upper Bound" = "X95.") %>%
mutate(across(c(`Cost (million AUD)`,`Lower Bound`, `Upper Bound`),~round(.x/10^6,2)))
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
mutate(across(c(median,X5.,X95.),~round(.x/10^6,2))) %>%
mutate(`90% CI` = paste(X5.,X95.,sep = '-')) %>%
rename("Cost (millions AUD)" = "median") %>%
select(-c(X5.,X95.))
CostTable
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
mutate(across(c(median,X5.,X95.),~round(.x/10^6,2))) %>%
mutate(`90% CI` = paste(X5.,X95.,sep = '-')) %>%
rename("Cost (millions AUD)" = "median") %>%
select(-c(X5.,X95.))
CostTable
Measures <- unique(CostTable$CostItem)
PathogenNames <- unique(CostTable$Pathogen)
Diseases <- unique(CostTable$Disease)
AgeGroups <- c("<5", "5-64", "65+")
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
CostTable
colnames(CostTable)
shinyApp(ui, server)
makeDeathsList <- function(year, diseases, ndraws = 10^6){
ageGroups <- c("<5","5-64","65+")
names(ageGroups) <- ageGroups
AusPop <- getAusPopAgeSex()
# Adjust to target year
PopInTargetYear <- AusPop %>% subset(Year == year) %>%
mutate(AgeGroup = ifelse(Age<5, "<5",ifelse(Age<65,"5-64", "65+"))) %>%
group_by(AgeGroup) %>%
summarise(Population = sum(Count))
Deaths <- map(diseases,function(.d){
map(ageGroups,function(.a){
dths <- subset(Deaths,Cause %in% .d$mortCodes & AgeGroup == .a)
#rgamma(ndraws, sum(dths$Count) + 0.5, dths$PersonYears[1]) * subset(PopInTargetYear, AgeGroup == .a)$Population *
rbeta(ndraws, sum(dths$Count) + 0.5, dths$PersonYears[1] - sum(dths$Count) + 0.5) * subset(PopInTargetYear, AgeGroup == .a)$Population *
draw(.d$underdiagnosis,ndraws) *
draw(.d$domestic,ndraws) *
draw(.d$foodborne,ndraws)
})
})
return(Deaths)
}
DeathsList <- makeDeathsList(2019,
diseases = c(DiseaseAssumptions[WorkingDiseases],SequelaeAssumptions),
ndraws = ndraws)
CostList <- makeCostList(2019, DiseaseAssumptions[WorkingDiseases], ndraws)
CostTable <- CostList %>% as.data.frame(check.names = F) %>%
mutate(Draw = row.names(.)) %>%
pivot_longer(-Draw, names_sep = "\\.",
names_to = c("Pathogen", "AgeGroup", "Disease","CostItem")) %>%
group_by(Pathogen, AgeGroup, Disease, CostItem) %>%
summarise(median = median(value),
`5%` = quantile(value, 0.05),
`95%` = quantile(value, 0.95))
write.csv(CostTable,'CostTable.csv')
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
mutate(across(c(median,X5.,X95.),~round(.x/10^6,2))) %>%
mutate(`90% CI` = paste(X5.,X95.,sep = '-')) %>%
rename("Cost (millions AUD)" = "median") %>%
select(-c(X5.,X95.))
CostTable
Measures <- unique(CostTable$CostItem)
PathogenNames <- unique(CostTable$Pathogen)
Diseases <- unique(CostTable$Disease)
AgeGroups <- c("<5", "5-64", "65+")
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
Deaths
mean(DeathsList$GBS$`65+`)
mean(DeathsList$GBS$`65+`) * VSL
Deaths
201/10 * 1.5
201/10 * 1.5 * 0.91 * 0.48
mean(DeathsList$GBS$`65+`)
median(DeathsList$GBS$`65+`)
# Calculate Incidence Lists
ndraws <- 10^5
WorkingDiseases <- c("Campylobacteriosis",'Salmonellosis',"Shigellosis")
### CURRENTLY THE ESTIMATES COSTS FUNCTION PULLS ON INCIDENCE LIST AS A GLOBAL
### VARIABLE WITH NO REGARD FOR WHICH YEAR INCIDENCE LIST WAS CALCULATED FOR.
### I.E. YOU CAN CALCULATE INCIDENCE FOR YEAR 2019 THEN CALCULATE COSTS FOR YEAR
### 2020 WITHOUT GENERATION AN ERROR. FIX BY MAKING INCIDENCE A LIST OF LISTS
### WITH AND ENTRY FOR EACH YEAR?
IncidenceList <- makeIncidenceList(2019,
diseases = DiseaseAssumptions[WorkingDiseases],
ndraws = ndraws)
SequelaeFractions <- calcSequelaeFractions(IncidenceList$Sequel)
DeathsList <- makeDeathsList(2019,
diseases = c(DiseaseAssumptions[WorkingDiseases],SequelaeAssumptions),
ndraws = ndraws)
CostList <- makeCostList(2019, DiseaseAssumptions[WorkingDiseases], ndraws)
CostTable <- CostList %>% as.data.frame(check.names = F) %>%
mutate(Draw = row.names(.)) %>%
pivot_longer(-Draw, names_sep = "\\.",
names_to = c("Pathogen", "AgeGroup", "Disease","CostItem")) %>%
group_by(Pathogen, AgeGroup, Disease, CostItem) %>%
summarise(median = median(value),
`5%` = quantile(value, 0.05),
`95%` = quantile(value, 0.95))
write.csv(CostTable,'CostTable.csv')
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
mutate(across(c(median,X5.,X95.),~round(.x/10^6,2))) %>%
mutate(`90% CI` = paste(X5.,X95.,sep = '-')) %>%
rename("Cost (millions AUD)" = "median") %>%
select(-c(X5.,X95.))
CostTable
Measures <- unique(CostTable$CostItem)
PathogenNames <- unique(CostTable$Pathogen)
Diseases <- unique(CostTable$Disease)
AgeGroups <- c("<5", "5-64", "65+")
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
Deaths
DeathsList %>% mquant
map(DeathsList,mquant)
source("./BuildCostTable.R")
getwd()
source("./R/BuildCostTable.R")
SalmOutbreakAssumptions <- DiseaseAssumptions$Salmonellosis
SalmOutbreakAssumptions$foodborne <- rdist("discrete", value = 1)
SalmOutbreakAssumptions$domestic <- rdist("discrete", value = 1)
SalmOutbreakAssumptions$underreporting <- rdist("discrete", value = 203/91)
SalmOutbreakAssumptions$ed <- rdist("discrete", value = 58/203)
SalmOutbreakAssumptions$hospPrincipalDiagnosis <- rdist("discrete", value = 1)
SalmOutbreakAssumptions$underdiagnosis <- rdist("discrete", value = 1)
SalmOutbreakCost <- estimateCosts(SalmOutbreakAssumptions, ageGroup = "5-64",notifications = 91,
separations = list(Salmonellosis = 32, IBS = 0, ReactiveArthiritis = 0))
source("./R/estimationFunctions.R")
SalmOutbreakCost <- estimateCosts(SalmOutbreakAssumptions, ageGroup = "5-64",notifications = 91,
separations = list(Salmonellosis = 32, IBS = 0, ReactiveArthiritis = 0))
mquant(SalmOutbreakCost$Salmonellosis)
0.21/38.75 * 1000000
IncidenceList$Initial$Salmonellosis$`5-64`
IncidenceList$Initial$Salmonellosis$`5-64` * DiseaseAssumptions$Salmonellosis$gpShort
IncidenceList$Initial$Salmonellosis$`5-64` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5)
quantile(IncidenceList$Initial$Salmonellosis$`5-64` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.025, 0.975))
quantile(IncidenceList$Initial$Salmonellosis$`5-64` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.025, 0.975)) * 38.75
quantile(IncidenceList$Initial$Salmonellosis$`5-64` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.05, 0.95)) * 38.75
round(quantile(IncidenceList$Initial$Salmonellosis$`5-64` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.05, 0.95)) / 1000)
round(quantile(IncidenceList$Initial$Salmonellosis$`5-64` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.05, 0.95)) / 1000)
quantile(IncidenceList$Initial$Salmonellosis$`5-64` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.05, 0.95))
round(quantile(IncidenceList$Initial$Salmonellosis$`5-64` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.05, 0.95))/1000,digits = 1)
round(quantile(IncidenceList$Initial$Salmonellosis$`<5` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.05, 0.95))/1000,digits = 1)
round(quantile(IncidenceList$Initial$Salmonellosis$`65+` * draw(DiseaseAssumptions$Salmonellosis$gpShort,n = 10^5), probs = c(0.5, 0.05, 0.95))/1000,digits = 1)
plot(function(x){x/(1-x)})
plot(function(x){x/(1-x)}, to =0.1)
plot(function(x){x/(1-x)}, to =0.5)
plot(function(x){x/(1-x)}, to = 0.1)
help(clogit)
??AF
Af.glm
AF::AF.glm
AF::AFglm
help(solve)
(523 + 14/3.2)/(523 + 14)
1 - (523 + 14/3.2)/(523 + 14)
ncase <- 1000; ncaseExposed <- 100; aOR <- 3; ncaseExposed/ncase * (1 - 1/aOR)
ncase <- 1000; ncaseExposed <- 800; aOR <- 3; ncaseExposed/ncase * (1 - 1/aOR)
ncase <- 1000; ncaseExposed <- 800; aOR <- 10; ncaseExposed/ncase * (1 - 1/aOR)
ncase <- 1000; ncaseExposed <- 800; aOR <- 1.1; ncaseExposed/ncase * (1 - 1/aOR)
ncase <- 1000; ncaseExposed <- 800; aOR <- 1.0; ncaseExposed/ncase * (1 - 1/aOR)
ncase <- 1000; ncaseExposed <- 800; aOR <- 0.9; ncaseExposed/ncase * (1 - 1/aOR)
help(predict)
library(tidyverse)
library(AF)
## simulate a fake population of 500000 people
NN <- 500000
pop <- data.frame(sex = runif(NN)<0.5,
age = runif(NN) * 100,
chicken = factor(sample(c("none","cooked","undercooked"),NN,
replace = T,prob = c(0.1, 0.89, 0.01)),
levels = c("none","cooked","undercooked"))) %>%
mutate(ppi = runif(NN) * 100 < age/2,
case = runif(NN) < plogis(-6 + log(2)*ppi +
sex * log(1.2) +
log(20) * (chicken == "undercooked") +
log(1.05) * (chicken == "cooked")))
pop %>% with(table(case))
## simulate a fake population of 500000 people
NN <- 500000
pop <- data.frame(sex = runif(NN)<0.5,
age = runif(NN) * 100,
chicken = factor(sample(c("none","cooked","undercooked"),NN,
replace = T,prob = c(0.1, 0.89, 0.01)),
levels = c("none","cooked","undercooked"))) %>%
mutate(ppi = runif(NN) * 100 < age/2,
case = runif(NN) < plogis(-6 + log(2)*ppi +
sex * log(1.2) +
log(20) * (chicken == "undercooked") +
log(1.05) * (chicken == "cooked")))
pop %>% with(table(case))
#conduct a fake case-control study of with 1000 cases and 1000 controls
n <- 500
data <- bind_rows(subset(pop, case == 1)[1:n,],
subset(pop, case == 0)[1:n,])
#replace the three-level chicken column with two dummy variables
data <- fastDummies::dummy_cols(data, c("chicken"), remove_first_dummy = T,remove_selected_columns = T)
#logistic regression -- note that the formula uses the names of two the *dummy variables*
m <- glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data, family = binomial())
exp(confint(m))
library(boot)
help(boot)
bootsamples <- boot(data, function(data, ind){glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial())})
bootsamples <- boot(data,
function(data, ind){coef(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()))},
R)
bootsamples <- boot(data,
function(data, ind){coef(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()))},
R = 100)
bootsamples
bootsamples$t0
bootsamples$t
bootsamples <- boot(data,
function(data, ind){AFglm(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()),
data[ind,],
"chicken_undercooked",
case.control = T)},
R = 100)
bootsamples <- boot(data,
function(data, ind){AFglm(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()),
data[ind,],
"chicken_undercooked",
case.control = T)$AF.est},
R = 100)
bootsamples
boot.ci(bootsamples)
help(boot.ci)
bootsamples <- boot(data,
function(data, ind){AFglm(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()),
data[ind,],
"chicken_undercooked",
case.control = T)$AF.est},
R = 100)
boot.ci(bootsamples,type = 'basic')
AFglm()
help(AFglm)
AFvars %>% map(~{boot(data,
function(data, ind){AFglm(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()),
data[ind,],
.x,
case.control = T)$AF.est},
R = 100)})
# using some code to automate calculating all the AFs for each of the variables of interest
AFvars <- c("chicken_cooked","chicken_undercooked", "ppi")
names(AFvars) <- AFvars
AFvars %>% map(~{boot(data,
function(data, ind){AFglm(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()),
data[ind,],
.x,
case.control = T)$AF.est},
R = 100)})
boot.ci(bootsamples,type = 'basic')
ci <- boot.ci(bootsamples,type = 'basic')
ci$basic
ci <- boot.ci(bootsamples,type = 'percentile')
ci <- boot.ci(bootsamples,type = 'percentile')
ci$R
ci$t0
ci$call
ci
ci <- boot.ci(bootsamples,type = 'percentile')
ci
help(boot.ci)
ci <- boot.ci(bootsamples,type = 'perc')
ci
ci$percent
bootsamples <- boot(data,
function(data, ind){AFglm(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()),
data[ind,],
"chicken_undercooked",
case.control = T)$AF.est},
R = 1000)
ci <- boot.ci(bootsamples,type = 'perc')
ci <- boot.ci(bootsamples,type = 'perc')
ci$percent
ci$percent[4:5]
AFvars %>% map(~{boot.ci(boot(data,
function(data, ind){AFglm(glm(case ~ chicken_cooked + chicken_undercooked + sex + ppi, data[ind,], family = binomial()),
data[ind,],
.x,
case.control = T)$AF.est},
R = 1000), type = 'perc')$percent[4:5]})
