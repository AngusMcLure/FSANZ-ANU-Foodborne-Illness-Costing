column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Diseases))
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X)
Measures <- unique(CostTable$CostItem)
PathogenNames <- unique(CostTable$Pathogen)
Diseases <- unique(CostTable$Disease)
AgeGroups <- c("<5", "5-64", "65+")
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
CostTable
help(across)
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename(median = "Cost",
X5. = "Lower Bound",
X95. = "Upper Bound") %>%
mutate(across(c(Cost,`Lower Bound`, `Upper Bound`),~round(.x/10^6,1)))
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename(median = "Cost",
X5. = "Lower Bound",
X95. = "Upper Bound")
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename("Cost"= "median",
X5. = "Lower Bound",
X95. = "Upper Bound") %>%
mutate(across(c(Cost,`Lower Bound`, `Upper Bound`),~round(.x/10^6,1)))
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename("Cost"= "median",
"Lower Bound" = "X5.",
"Upper Bound" = "X95.") %>%
mutate(across(c(Cost,`Lower Bound`, `Upper Bound`),~round(.x/10^6,1)))
CostTable
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename("Cost"= "median",
"Lower Bound" = "X5.",
"Upper Bound" = "X95.") %>%
mutate(across(c(Cost,`Lower Bound`, `Upper Bound`),~round(.x/10^6,2)))
CostTable
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename("Cost (m AUD)"= "median",
"Lower Bound" = "X5.",
"Upper Bound" = "X95.") %>%
mutate(across(c(`Cost (m AUD)`,`Lower Bound`, `Upper Bound`),~round(.x/10^6,2)))
Measures <- unique(CostTable$CostItem)
CostTable
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
rename("Cost (million AUD)"= "median",
"Lower Bound" = "X5.",
"Upper Bound" = "X95.") %>%
mutate(across(c(`Cost (million AUD)`,`Lower Bound`, `Upper Bound`),~round(.x/10^6,2)))
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
mutate(across(c(median,X5.,X95.),~round(.x/10^6,2))) %>%
mutate(`90% CI` = paste(X5.,X95.,sep = '-')) %>%
rename("Cost (millions AUD)" = "median") %>%
select(-c(X5.,X95.))
CostTable
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
mutate(across(c(median,X5.,X95.),~round(.x/10^6,2))) %>%
mutate(`90% CI` = paste(X5.,X95.,sep = '-')) %>%
rename("Cost (millions AUD)" = "median") %>%
select(-c(X5.,X95.))
CostTable
Measures <- unique(CostTable$CostItem)
PathogenNames <- unique(CostTable$Pathogen)
Diseases <- unique(CostTable$Disease)
AgeGroups <- c("<5", "5-64", "65+")
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
CostTable
colnames(CostTable)
shinyApp(ui, server)
makeDeathsList <- function(year, diseases, ndraws = 10^6){
ageGroups <- c("<5","5-64","65+")
names(ageGroups) <- ageGroups
AusPop <- getAusPopAgeSex()
# Adjust to target year
PopInTargetYear <- AusPop %>% subset(Year == year) %>%
mutate(AgeGroup = ifelse(Age<5, "<5",ifelse(Age<65,"5-64", "65+"))) %>%
group_by(AgeGroup) %>%
summarise(Population = sum(Count))
Deaths <- map(diseases,function(.d){
map(ageGroups,function(.a){
dths <- subset(Deaths,Cause %in% .d$mortCodes & AgeGroup == .a)
#rgamma(ndraws, sum(dths$Count) + 0.5, dths$PersonYears[1]) * subset(PopInTargetYear, AgeGroup == .a)$Population *
rbeta(ndraws, sum(dths$Count) + 0.5, dths$PersonYears[1] - sum(dths$Count) + 0.5) * subset(PopInTargetYear, AgeGroup == .a)$Population *
draw(.d$underdiagnosis,ndraws) *
draw(.d$domestic,ndraws) *
draw(.d$foodborne,ndraws)
})
})
return(Deaths)
}
DeathsList <- makeDeathsList(2019,
diseases = c(DiseaseAssumptions[WorkingDiseases],SequelaeAssumptions),
ndraws = ndraws)
CostList <- makeCostList(2019, DiseaseAssumptions[WorkingDiseases], ndraws)
CostTable <- CostList %>% as.data.frame(check.names = F) %>%
mutate(Draw = row.names(.)) %>%
pivot_longer(-Draw, names_sep = "\\.",
names_to = c("Pathogen", "AgeGroup", "Disease","CostItem")) %>%
group_by(Pathogen, AgeGroup, Disease, CostItem) %>%
summarise(median = median(value),
`5%` = quantile(value, 0.05),
`95%` = quantile(value, 0.95))
write.csv(CostTable,'CostTable.csv')
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
mutate(across(c(median,X5.,X95.),~round(.x/10^6,2))) %>%
mutate(`90% CI` = paste(X5.,X95.,sep = '-')) %>%
rename("Cost (millions AUD)" = "median") %>%
select(-c(X5.,X95.))
CostTable
Measures <- unique(CostTable$CostItem)
PathogenNames <- unique(CostTable$Pathogen)
Diseases <- unique(CostTable$Disease)
AgeGroups <- c("<5", "5-64", "65+")
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
Deaths
mean(DeathsList$GBS$`65+`)
mean(DeathsList$GBS$`65+`) * VSL
Deaths
201/10 * 1.5
201/10 * 1.5 * 0.91 * 0.48
mean(DeathsList$GBS$`65+`)
median(DeathsList$GBS$`65+`)
# Calculate Incidence Lists
ndraws <- 10^5
WorkingDiseases <- c("Campylobacteriosis",'Salmonellosis',"Shigellosis")
### CURRENTLY THE ESTIMATES COSTS FUNCTION PULLS ON INCIDENCE LIST AS A GLOBAL
### VARIABLE WITH NO REGARD FOR WHICH YEAR INCIDENCE LIST WAS CALCULATED FOR.
### I.E. YOU CAN CALCULATE INCIDENCE FOR YEAR 2019 THEN CALCULATE COSTS FOR YEAR
### 2020 WITHOUT GENERATION AN ERROR. FIX BY MAKING INCIDENCE A LIST OF LISTS
### WITH AND ENTRY FOR EACH YEAR?
IncidenceList <- makeIncidenceList(2019,
diseases = DiseaseAssumptions[WorkingDiseases],
ndraws = ndraws)
SequelaeFractions <- calcSequelaeFractions(IncidenceList$Sequel)
DeathsList <- makeDeathsList(2019,
diseases = c(DiseaseAssumptions[WorkingDiseases],SequelaeAssumptions),
ndraws = ndraws)
CostList <- makeCostList(2019, DiseaseAssumptions[WorkingDiseases], ndraws)
CostTable <- CostList %>% as.data.frame(check.names = F) %>%
mutate(Draw = row.names(.)) %>%
pivot_longer(-Draw, names_sep = "\\.",
names_to = c("Pathogen", "AgeGroup", "Disease","CostItem")) %>%
group_by(Pathogen, AgeGroup, Disease, CostItem) %>%
summarise(median = median(value),
`5%` = quantile(value, 0.05),
`95%` = quantile(value, 0.95))
write.csv(CostTable,'CostTable.csv')
#source("./R/Trial Script.R")
#DiseaseNames <- names(DiseaseAssumptions)
CostTable <- read.csv("CostTable.csv") %>%
select(-X) %>%
mutate(across(c(median,X5.,X95.),~round(.x/10^6,2))) %>%
mutate(`90% CI` = paste(X5.,X95.,sep = '-')) %>%
rename("Cost (millions AUD)" = "median") %>%
select(-c(X5.,X95.))
CostTable
Measures <- unique(CostTable$CostItem)
PathogenNames <- unique(CostTable$Pathogen)
Diseases <- unique(CostTable$Disease)
AgeGroups <- c("<5", "5-64", "65+")
ui <- fluidPage(
titlePanel("Cost of Foodborne Diseases in Australia"),
tabsetPanel(type = "pills",
tabPanel("Compare Years and Pathogens",
fluidRow(column(width = 3,
selectInput(
"Pathogen",
"Pathogen",
PathogenNames,
selected = PathogenNames,
multiple = TRUE
)),
column(width = 3,
selectInput(
"AgeGroups",
"AgeGroups",
AgeGroups,
selected = AgeGroups,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Measure",
"Measure",
Measures,
selected = Measures,
multiple = TRUE
)),
column(width = 3,
selectInput(
"Disease",
"Disease",
Diseases,
selected = Diseases,
multiple = TRUE
))
),
DT::dataTableOutput("mytable1"))
)
)
server <- function(input, output) {
output$mytable1 = DT::renderDataTable(CostTable %>%
subset(CostItem %in% input$Measure &
AgeGroup %in% input$AgeGroups &
Pathogen %in% input$Pathogen &
Disease %in% input$Disease))
}
shinyApp(ui, server)
Deaths
DeathsList %>% mquant
map(DeathsList,mquant)
