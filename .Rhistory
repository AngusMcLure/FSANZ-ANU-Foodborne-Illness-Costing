EpiList <- EpiList %>% appendGroupTotals('Count',group_cols) %>% quantileListColumn('Count') %>% rename(median = `50%`)
#Epi tables
EpiList %>%
subset(Pathogen == 'All pathogens'  & Disease == "Initial") %>%
ungroup %>%
group_by(Measure) %>%
group_walk(~{.x %>%
rename(X5. = '5%', X95. = '95%') %>%
medianCIformat(unit = 1) %>%
select(Agegroup, Source, Count = Cost) %>%
pivot_wider(names_from = Agegroup, values_from = Count) %>%
mutate(Source = factor(Source) %>% fct_relevel('Other','AllFood', after = Inf)) %>%
arrange(Source) %>%
write_excel_csv(paste('AttributionReport/EpiTable',
paste(.y,collapse = '.'),
'csv',sep = '.'))
})
#Cost tables
CostList %>%
subset(CostCategory == "TotalHumanCapital" & Disease == "Initial and sequel disease") %>%
group_by(Pathogen) %>%
group_walk(~{.x %>%
rename(X5. = '5%', X95. = '95%') %>%
medianCIformat() %>%
mutate(Cost = if_else(Cost == "0", "0*", Cost)) %>%
select(Agegroup, Source, Cost) %>%
pivot_wider(names_from = Agegroup, values_from = Cost) %>%
mutate(Source = factor(Source) %>% fct_relevel('Other','AllFood', after = Inf)) %>%
arrange(Source) %>%
write_excel_csv(paste('AttributionReport/CostTable',
paste(.y,collapse = '.'),
'csv',sep = '.'))
})
#Order Food by cost
FoodCatOrdered <- CostList %>% subset(Pathogen == 'All pathogens' &
CostCategory == 'TotalHumanCapital' &
Agegroup == 'All ages' &
Disease == "Initial and sequel disease") %>%
arrange(median) %>% `[`(,'Source', drop = TRUE)
#Combine the summary data for cost and epi
CombinedSummaries <- EpiList %>% ungroup %>%
bind_rows(CostList %>% ungroup %>%
subset(CostCategory == 'TotalHumanCapital') %>%
select(-CostCategory) %>%
mutate(Measure = 'Cost')
) %>%
subset(Disease == "Initial and sequel disease" &
Agegroup == 'All ages') %>%
mutate(SourceCat = if_else(Source == 'AllFood', 'All Food', "Individual Items"),
#Source = factor(Source,FoodCatOrderedCases),
Source = factor(Source,FoodCatOrdered),
Source = recode(Source, AllFood = 'All Food'),
Source = fct_relevel(Source, 'Other', after = 0)
)
P.CostProp <- CombinedSummaries %>%
subset(Measure == "Cost" &
Pathogen != 'All pathogens') %>%
ggplot(aes(x = Source,
y = median * 10^-6,
fill = Pathogen,
label = round(median * 10^-6))) +
geom_bar(stat = 'identity') +
xlab('Food product') +
ylab('Annual cost (millions AUD)') +
coord_flip() +
ggh4x::facet_grid2("SourceCat", scales = 'free',space = 'free_y', independent = 'x',switch = 'both') +
theme(legend.position = c(0.70, 0.25),
strip.text.y = element_blank())
P.CostProp
ggsave(filename = 'AttributionReport/CostBySourcePathogen.png',P.CostProp)
ggsave(filename = 'AttributionReport/CostBySourcePathogen.png',P.CostProp, width = 1941, height = 1787, units = 'px')
P.EpiProp <- CombinedSummaries %>%
subset(Pathogen != 'All pathogens') %>%
mutate(median = if_else(Measure == 'Cases', median/1000,
if_else(Measure == "Cost", median/1000000, median))) %>%
mutate(Measure = recode(Measure,
Cases = 'Cases (thousands)',
Cost = 'Cost (millions AUD)')) %>%
mutate(Measure = factor(Measure, levels = c('Cases (thousands)', 'Hospitalisations', "Deaths",
'Cost (millions AUD)'))) %>%
ggplot(aes(x = Source,
y = median,
fill = Pathogen,
label = round(median/10^6))) +
geom_bar(stat = 'identity') +
xlab('Food product') +
ylab('') +
coord_flip() +
ggh4x::facet_grid2(SourceCat~Measure, scales = 'free',space = 'free_y', independent = 'x',switch = 'both') +
theme(legend.position = 'bottom', legend.direction = 'horizontal',
#legend.position = c(0.9,0.125),
strip.placement = 'outside',
strip.text.y = element_blank(),
strip.background.x = element_rect('white'))
P.EpiProp
ggsave(filename = 'AttributionReport/EpiBySourcePathogen.png',P.EpiProp, width = 11)
ggsave(filename = 'AttributionReport/EpiBySourcePathogen.png',P.EpiProp, width = 3300, height = 1787, units = 'px')
P.CostPropAlt <- CostList %>%
subset(Disease == "Initial and sequel disease" &
Agegroup == 'All ages' &
CostCategory == "TotalHumanCapital" &
Source != 'AllFood') %>%
mutate(PathogenCat = if_else(Pathogen == 'All pathogens', 'All Pathogens', "Individual Pathogens")) %>%
ggplot(aes(x = Pathogen,
y = median/10^6,
fill = Source,
label = round(median/10^6))) +
geom_bar(stat = 'identity') +
xlab('Pathogen') +
ylab('Annual cost (millions AUD)') +
coord_flip() +
ggh4x::facet_grid2(PathogenCat~., scales = 'free',space = 'free_y', independent = 'x',switch = 'both') +
theme(strip.placement = 'outside',
strip.text.y = element_blank())
P.CostPropAlt
ggsave(filename = 'AttributionReport/CostByPathogenSource.png',P.CostPropAlt)
ggsave(filename = 'AttributionReport/CostByPathogenSource.png',P.CostPropAlt, width = 1941, height = 1787, units = 'px')
CostPerCase <- CombinedSummaries %>% select(-c(`5%`,`95%`,Agegroup,SourceCat,Disease)) %>%
pivot_wider(names_from = Measure, values_from = median) %>%
mutate(`Cost per case (AUD)` = signif(Cost/Cases,3),
`Hospitalisations per million cases` = signif(Hospitalisations/Cases * 1000000,3),
`Deaths per million cases` = signif(Deaths/Cases * 1000000,3)) %>%
subset(Pathogen == "All pathogens") %>%
select(!c(Pathogen, Cost, Deaths, Hospitalisations)) %>%
arrange(`Cost per case (AUD)`)
CostPerCase %>% write.csv('AttributionReport/CostPerCaseByFood.csv')
textlist <- function(cl, conj = 'and', oxford = TRUE){
n <- length(cl)
if(n == 0) return(character(0))
else if(n == 1) return(as.character(cl))
else if(n == 2) return(paste(cl[1], conj, cl[2]))
else return(paste0(paste(cl[1:(n-1)], collapse = ', '), if(oxford){','}else{''},' ', conj, ' ', cl[n]))
}
textCountObj <- function(n, name, plural = NULL){
plural <- pluralize(name)
if(n == 1 || n == 'one'){return(paste(n, name))}
else{return(paste(n, plural))}
}
matchVerbNoun <- function(verb, noun){
if(is_plural(noun)){
return(pluralize(verb))
}else{
return(singularize(verb))
}
}
attribtionSentencesPathogen <- function(pathogen){
cl <- CostList %>% subset(Pathogen == pathogen &
Agegroup == 'All ages' &
CostCategory == "TotalHumanCapital" &
median != 0)
el <- EpiList %>% subset(Pathogen == pathogen &
Agegroup == 'All ages' &
median != 0)
InitDisease <- PathogenAssumptions[[pathogen]]$name
SequelDiseases <- names(PathogenAssumptions[[pathogen]]$sequelae)
TotalCost <- subset(cl, Source == 'AllFood' &
Disease == 'Initial and sequel disease')$median #not tidied until later as it is needed for calculation fractions
CasesInit <- subset(el, Source == 'AllFood' &
Measure == 'Cases' &
Disease == 'Initial')$median %>% tidyNumber(unit = 1, max.word = 21)
CasesSequel <- subset(el, Source == 'AllFood' &
Measure == 'Cases' &
Disease %in% SequelDiseases)$median %>% sum %>% tidyNumber(unit = 1, max.word = 21)
Hosp <- subset(el, Source == 'AllFood' &
Measure == 'Hospitalisations' &
Disease == 'Initial and sequel disease')$median %>% tidyNumber(unit = 1, max.word = 21)
Deaths <- subset(el, Source == 'AllFood' &
Measure == 'Deaths' &
Disease == 'Initial and sequel disease')$median %>% tidyNumber(unit = 1, max.word = 21)
SourceCosts <-  subset(cl, Disease == 'Initial and sequel disease' & Source != 'AllFood') %>% arrange(desc(median))
SourcesOrdered <- SourceCosts$Source
SourceCostsOrdered <- SourceCosts$median
SourcePropOrdered <- round(SourceCostsOrdered/TotalCost* 100)
SourceCostsOrdered <- SourceCostsOrdered %>% tidyNumber(unit = 10^6, round = FALSE)
TotalCost <- TotalCost %>% tidyNumber(unit = 10^6, round = FALSE)
LeadingSourceCases <- subset(el, Source == SourcesOrdered[1] &
Measure == 'Cases' &
Disease == 'Initial')$median %>% tidyNumber(unit = 1, max.word = 21)
LeadingSourceCasesSequel <- subset(el, Source == SourcesOrdered[1] &
Measure == 'Cases' &
Disease %in% SequelDiseases)$median %>% sum %>% tidyNumber(unit = 1, max.word = 21)
LeadingSourceHosp <- subset(el, Source == SourcesOrdered[1] &
Measure == 'Hospitalisations' &
Disease == 'Initial and sequel disease')$median %>% tidyNumber(unit = 1, max.word = 21)
LeadingSourceDeaths <- subset(el, Source == SourcesOrdered[1] &
Measure == 'Deaths' &
Disease == 'Initial and sequel disease')$median %>% tidyNumber(unit = 1, max.word = 21)
hasSequel <- length(SequelDiseases) > 0
str_glue(
'{pathogen} resulted in an annual cost of approximately {TotalCost} million
AUD circa 2019 arising from {CasesInit} cases of',
if(hasSequel){' initial '}else{' '},'illness, ',
if(hasSequel){'{CasesSequel} cases of sequel illness ({textlist(tolower(SequelDiseases),conj = "or")}), '}else{''},
'{Hosp} hospitalisations, and {textCountObj(Deaths, "death")}. {SourcesOrdered[1]}
{matchVerbNoun("was",SourcesOrdered[1])} the leading source ({SourcePropOrdered[1]}%)
with a total annual cost of {SourceCostsOrdered[1]} million AUD arising from
{LeadingSourceCases} cases of', if(hasSequel){' initial '}else{' '},'illness, ',
if(hasSequel){'{LeadingSourceCasesSequel} cases of sequel illness, '}else{''},
'{LeadingSourceHosp} hospitalisations, and {textCountObj(LeadingSourceDeaths, "death")}. The
next three most frequent sources were ',
textlist(glue('{tolower(SourcesOrdered[2:4])} ({SourcePropOrdered[2:4]}%)')), '.'
) %>%
gsub('\n',' ',., fixed = TRUE)
}
attributionSentencesSource <- function(){
cl <- CostList %>% subset(Agegroup == 'All ages' &
CostCategory == "TotalHumanCapital" &
median != 0)
el <- EpiList %>% subset(Measure == 'Cases' &
Agegroup == 'All ages'&
Disease == 'Initial' &
median != 0)
PathogenNames <- setdiff(unique(CostList$Pathogen), 'All pathogens')
TotalCost <- subset(cl, Disease == 'Initial and sequel disease' &
Pathogen == 'All pathogens' &
Source == 'AllFood')$median %>% tidyNumber(unit = 10^6, round = FALSE)
SourceCosts <-  subset(cl, Disease == 'Initial and sequel disease' &
Pathogen == 'All pathogens' &
Source != 'AllFood') %>% arrange(desc(median))
SourcesCostOrdered <- SourceCosts$Source
SourcesCostOrderedCosts <- SourceCosts$median %>% tidyNumber(unit = 10^6, round = FALSE)
LeadingSourceCosts <- subset(cl, Disease == 'Initial and sequel disease' &
Pathogen != 'All pathogens' &
Source == SourcesCostOrdered[1]) %>% arrange(desc(median))
PathogensCostOrdered <- LeadingSourceCosts$Pathogen
PathogensCostOrderedCosts <- LeadingSourceCosts$median %>% tidyNumber(unit = 10^6, round = FALSE)
## Sources by number of
TotalCases <- subset(el, Pathogen == 'All pathogens' &
Source == 'AllFood')$median %>% tidyNumber(unit = 1, max.word = 21)
SourceCases <-  subset(el, Pathogen == 'All pathogens' &
Source != 'AllFood') %>% arrange(desc(median))
SourcesCaseOrdered <- SourceCases$Source
SourcesCaseOrderedCases <- SourceCases$median %>% tidyNumber(unit = 1, max.word = 21)
LeadingSourceCases <- subset(el, Pathogen != 'All pathogens' &
Source == SourcesCaseOrdered[1]) %>% arrange(desc(median))
PathogensCaseOrdered <- LeadingSourceCases$Pathogen
PathogensCaseOrderedCases <- LeadingSourceCases$median %>% tidyNumber(unit = 1, max.word = 21)
str_glue(
textlist(glue('{PathogenNames}')),
' have an estimated annual burden of {TotalCases} cases and {TotalCost} million AUD.
Among the pathogens and food categories considered, {tolower(SourcesCostOrdered[1])}
{matchVerbNoun("was",SourcesCostOrdered[1])} associated with the greatest cost
of foodborne illness, with a total cost of {SourcesCostOrderedCosts[1]} million AUD.
Of this total, ',
textlist(glue('{PathogensCostOrderedCosts} million AUD was due to {PathogensCostOrdered}')),
'. The food category associated with the most cases of foodborne illness circa 2019
was', if(SourcesCaseOrdered[1] == SourcesCostOrdered[1]){' also '}else{' '},
'{tolower(SourcesCaseOrdered[1])}, with a total burden of {SourcesCaseOrderedCases[1]} cases. Of this total, ',
textlist(glue('{PathogensCaseOrderedCases} cases were due to {PathogensCaseOrdered}')),'.'
)%>%
gsub('\n',' ',., fixed = TRUE)
}
attributionSentencesSource() %>% write_lines('AttributionReport/PathogenAttributionSummariesText.txt',
sep = '\n\n')
CommonPathogens %>%
map(attribtionSentencesPathogen) %>%
write_lines('AttributionReport/PathogenAttributionSummariesText.txt',
sep = '\n\n', append = TRUE)
#Write Cost and Epi List summaries for further analysis -- e.g. could be used to build an interactive tool
write.csv(CostList, 'AttributionReport/AttrCostTable.csv')
write.csv(EpiList, 'AttributionReport/EpiCostTable.csv')
write.csv(EpiList, 'AttributionReport/EpiCostTable.csv')
CostList
CostList %>% subset(Agegroup == 'AllAges')
CostList %>% subset(Agegroup == 'All Ages')
CostList$Agegroup %>% unique
CostList %>% subset(Agegroup == 'All ages')
CostList %>% subset(Agegroup == 'All ages' & Pathogen == 'Non-typhoidal Salmonella')
CostList %>% subset(Agegroup == 'All ages' & Pathogen == 'Non-typhoidal Salmonella') %>% View
EpiList %>% subset(Agegroup == 'All ages' & Pathogen == 'Non-typhoidal Salmonella') %>% View
CostList %>% subset(Agegroup == 'All ages' & Pathogen == 'Non-typhoidal Salmonella') %>% View
EpiList %>% subset(Agegroup == 'All ages' & Pathogen == 'Non-typhoidal Salmonella') %>% View
EpiList %>% subset(Agegroup == 'All ages' & Pathogen == 'Non-typhoidal Salmonella' & Measure == 'Cases') %>% View
EpiList %>% subset(Agegroup == 'All ages' & Pathogen == 'Non-typhoidal Salmonella' & Measure == 'Cases' & Disease == 'Initial') %>% View
help(gamma)
help(dgamma)
rgamma(100,0,0)
library(shiny); runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
help("tabPanel")
help("textOutput")
runApp('shiny.R')
help("str_glue")
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
renderMarkdown
??renderMarkdown
includeMarkdown()
help("includeMarkdown")
markdown::render('InfoText.Rmd')
render
help(render)
rmarkdown::render('InfoText.Rmd')
out <- rmarkdown::render('InfoText.Rmd')
out
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
CPIData <- read.csv('./Data/CPI-ABS.csv')
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1)
CPIData
CPIData %>% View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na()
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-') %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year')) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
View
'a'<'b'
'b'<'a'
help('<')
help('<.character')
class('a')
help(`<.character`)
`<`
help"as.data.frame")
help("as.Date")
as_date()
help("as_date")
as_date('Mar-2019')
as_date('Mar-2019','Mmm-YYYY')
as_date('Mar-2019',format = 'Mmm-YYYY')
as_date('01-Mar-2019',format = 'dd-Mmm-YYYY')
as_date('01-Mar-2019',format = '%d-%-%Y')
as_date('01-Mar-2019',format = '%d-%m-%Y')
as_date('Mar-2019',format = '%d-%m-%Y')
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter), format = '%d-%m-%Y')) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = paste0('01-',Quarter)) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%Y')) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = paste0('01-',Quarter))
CPIData
CPIData$Date
as.date(CPIData$Date, format = '%d-%m-%Y')
as_date(CPIData$Date, format = '%d-%m-%Y')
as_date(CPIData$Date, format = '%d-%m-%y')
as_date(CPIData$Date, format = '%d-%m-%y') %>% class
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y'))
CPIData
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
mutate(CummCPI = 1-cumprod(1+Change.Quarterly)) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
mutate(CummCPI = cumprod(1+Change.Quarterly)-1) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
mutate(CummCPI = cumprod(1+Change.Quarterly/100)-1) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
separate_wider_delim(Quarter,'-',names = c('Month','Year'),cols_remove = FALSE) %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
mutate(CummCPI = 100*(cumprod(1+Change.Quarterly/100)-1)) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
mutate(CummCPI = 100*(cumprod(1+Change.Quarterly/100)-1)) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
mutate(Inflation.Multiplier = cumprod(1+Change.Quarterly/100),
CummCPI = 100*(Inflation.Multiplier-1)) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
mutate(Cumm.Inflation.Multiplier = cumprod(1+Change.Quarterly/100),
CummCPI = 100*(Inflation.Multiplier-1)) %>%
View
CPIData <- read.csv('./Data/CPI-ABS.csv',skip = 1,
col.names = c('Quarter', 'Change.Quarterly', 'Change.Annualised')) %>%
drop_na() %>%
mutate(Date = as_date(paste0('01-',Quarter),format = '%d-%m-%y')) %>%
subset(Date > as_date('2019-06-01')) %>%
arrange(Date) %>%
mutate(Cumm.Inflation.Multiplier = cumprod(1+Change.Quarterly/100),
CummCPI = 100*(Cumm.Inflation.Multiplier-1)) %>%
View
selectInput()
help("selectInput")
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
help("fluidRow")
runApp('shiny.R')
runApp('shiny.R')
HTML(paste0(rep('<br />',10),collapse = ' ')
