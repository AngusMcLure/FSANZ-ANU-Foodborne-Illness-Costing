sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
colnames(DeathsNew) <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
) %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
AusPop <- getAusPopAgeSex()
AusPop
AusPop <- getAusPopAgeGroup()
AusPop
#Read in 2014-2023 death data
DeathsNew <- read_xlsx('C:/Users/u4859599/Documents/GitHub/FSANZ-ANU-Foodborne-Illness-Costing/Data//Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
AusPop
AusPop <- getAusPopAgeGroup() %>% subset(Year %in% Years)
#Read in 2014-2023 death data
DeathsNew <- read_xlsx('C:/Users/u4859599/Documents/GitHub/FSANZ-ANU-Foodborne-Illness-Costing/Data//Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
colnames(DeathsNew) <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
Years <- unique(DeathsNew$Year)
# Sum over years
DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
AusPop <- getAusPopAgeGroup() %>% subset(Year %in% Years)
Years
AusPop <- getAusPopAgeGroup() %>% subset(Year %in% Years)
AusPop
AusPop <- getAusPopAgeGroup()
AusPop$Year
Years
Years <- as.integer(unique(DeathsNew$Year))
Years <- DeathsNew$Year %>% unique %>% as.integer
Years
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
#Read in 2014-2023 death data
DeathsNew <- read_xlsx('C:/Users/u4859599/Documents/GitHub/FSANZ-ANU-Foodborne-Illness-Costing/Data//Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
colnames(DeathsNew) <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
Years <- DeathsNew$Year %>% unique %>% as.integer
# Sum over years
DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
AusPop <- getAusPopAgeGroup() %>% subset(Year %in% Years)
AusPop
DeathsNew <- DeathsNew %>%
bind_cols(AusPop)
DeathsNew <- DeathsNew %>%
merge(AusPop)
DeathsNew
View(DeathsNew)
AusPop <- getAusPopAgeGroup() %>%
subset(Year %in% Years) %>%
group_by(AgeGroup) %>%
summarise(PersonYears = sum(Persons))
DeathsNew <- DeathsNew %>%
merge(AusPop)
#Read in 2014-2023 death data
DeathsNew <- read_xlsx('C:/Users/u4859599/Documents/GitHub/FSANZ-ANU-Foodborne-Illness-Costing/Data//Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
colnames(DeathsNew) <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
Years <- DeathsNew$Year %>% unique %>% as.integer
# Sum over years
DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
AusPop <- getAusPopAgeGroup() %>%
subset(Year %in% Years) %>%
group_by(AgeGroup) %>%
summarise(PersonYears = sum(Persons))
DeathsNew <- DeathsNew %>%
merge(AusPop)
View(DeathsNew)
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
Years <- DeathsNew$Year %>% unique %>% as.integer
# Sum over years
DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
#Read in 2014-2023 death data
DeathsNew <- read_xlsx('C:/Users/u4859599/Documents/GitHub/FSANZ-ANU-Foodborne-Illness-Costing/Data//Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
colnames(DeathsNew) <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
Years <- DeathsNew$Year %>% unique %>% as.integer
# Sum over years
DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
DeathsNew
AusPop <- getAusPopAgeGroup() %>%
subset(Year %in% Years) %>%
group_by(AgeGroup) %>%
summarise(PersonYears = sum(Persons))
AusPop
DeathsNew <- DeathsNew %>%
merge(AusPop)
DeathsNew
View(DeathsNew)
View(DeathsNew)
library(tidyverse)
library(readxl)
source("./RFiles/loadData.R")
DeathsOld <- getABSDeaths() %>% View
DeathsOld <- bind_rows(DeathsOld,DeathsOld %>%
group_by(Cause) %>%
summarise(Count = sum(Count)) %>%
mutate(AgeGroup = 'Total')) %>%
arrange(Cause,AgeGroup)
#Read in 2014-2023 death data
DeathsNew <- read_xlsx('C:/Users/u4859599/Documents/GitHub/FSANZ-ANU-Foodborne-Illness-Costing/Data//Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
colnames(DeathsNew) <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
Years <- DeathsNew$Year %>% unique %>% as.integer
# Sum over years
DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
AusPop <- getAusPopAgeGroup() %>%
subset(Year %in% Years) %>%
group_by(AgeGroup) %>%
summarise(PersonYears = sum(Persons))
View(DeathsNew)
DeathsNew <- DeathsNew %>%
merge(AusPop)
View(DeathsNew)
AusPop <- getAusPopAgeGroup() %>%
subset(Year %in% Years) %>%
group_by(AgeGroup) %>%
summarise(PersonYears = sum(Persons))
AusPop
library(tidyverse)
library(readxl)
source("./RFiles/loadData.R")
DeathsOld <- getABSDeaths() %>% View
DeathsOld <- bind_rows(DeathsOld,DeathsOld %>%
group_by(Cause) %>%
summarise(Count = sum(Count)) %>%
mutate(AgeGroup = 'Total')) %>%
arrange(Cause,AgeGroup)
#Read in 2014-2023 death data
DeathsNew <- read_xlsx('C:/Users/u4859599/Documents/GitHub/FSANZ-ANU-Foodborne-Illness-Costing/Data//Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
colnames(DeathsNew) <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
Years <- DeathsNew$Year %>% unique %>% as.integer
# Sum over years
DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
colnames(DeathsNew)
DeathsNew
# Sum over years
DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
colnames(DeathsNew)
# Sum over years
DeathsNew <- DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
colnames(DeathsNew)
AusPop <- getAusPopAgeGroup() %>%
subset(Year %in% Years) %>%
group_by(AgeGroup) %>%
summarise(PersonYears = sum(Persons))
DeathsNew <- DeathsNew %>%
merge(AusPop)
View(DeathsNew)
DeathsOld <- getABSDeaths() %>% View
View(DeathsNew)
View(DeathsOld)
DeathsOld <- getABSDeaths()
View(DeathsOld)
DeathsNew <- DeathsNew %>%
merge(AusPop) %>%
mutate(Rate = Count/PersonYears)
View(DeathsOld)
View(DeathsNew)
DeathsNew <- DeathsNew %>%
merge(AusPop) %>%
mutate(Rate = Count/PersonYears) %>%
subset(AgeGroup != 'Total')
#Read in 2014-2023 death data
DeathsNew <- read_xlsx('C:/Users/u4859599/Documents/GitHub/FSANZ-ANU-Foodborne-Illness-Costing/Data//Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46') %>%
select(-...2)
colnames(DeathsNew) <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
#Convert to long form data
DeathsNew <- DeathsNew %>%
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(), #Extract out cause of death code
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)
Years <- DeathsNew$Year %>% unique %>% as.integer
# Sum over years
DeathsNew <- DeathsNew %>%
group_by(AgeGroup,Cause) %>% #sum over years
summarise(Count = sum(Deaths))
colnames(DeathsNew)
AusPop <- getAusPopAgeGroup() %>%
subset(Year %in% Years) %>%
group_by(AgeGroup) %>%
summarise(PersonYears = sum(Persons))
DeathsNew <- DeathsNew %>%
merge(AusPop) %>%
mutate(Rate = Count/PersonYears) %>%
subset(AgeGroup != 'Total')
View(DeathsOld)
View(DeathsNew)
warning("Reported perinatal deaths due to Listeria have not been added in,",
"but were in previous models. Check that this doesn't need to be fixed")
warning("Reported perinatal deaths due to Listeria have not been added in, ",
"but were in previous models. Check that this doesn't need to be fixed")
length(Years)
Deaths <- getABSDeaths()
source("./RFiles/Distributions.R")
source("./RFiles/ClassDefinitions.R")
source("./RFiles/Diseases.R")
source("./RFiles/loadData.R")
source('./RFiles/summaryFunctions.R')
source("./RFiles/estimationFunctions.R")
Deaths <- getABSDeaths()
source("./RFiles/Distributions.R")
source("./RFiles/ClassDefinitions.R")
source("./RFiles/Diseases.R")
source("./RFiles/loadData.R")
source('./RFiles/summaryFunctions.R')
source("./RFiles/estimationFunctions.R")
Deaths <- getABSDeaths()
out <- read_xlsx('./Data/Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A7:AP46')
out
View(out)
read_xlsx('./Data/Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A8:AP46',
col_names = '')
#Data is in ugly format. Need to label columns somewhat manually
column_names <- c('Cause',
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')))
out <- read_xlsx('./Data/Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A8:AP46',
col_names = column_names)
help(read_xlsx)
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total'))
paste(sort(rep(2014:2023, 4)),
c('<5', '5-64', '65+', 'Total')) %>% length
column_names <- c('Cause',
paste(sort(rep(Years, length(AgeGroups))),AgeGroups))
#Data is in ugly format. Need to label columns somewhat manually
Years <- 2014:2023
AgeGroups <- c('<5', '5-64', '65+', 'Total')
column_names <- c('Cause',
paste(sort(rep(Years, length(AgeGroups))),AgeGroups))
column_names
#Input data is in ugly format, so I need to label columns somewhat manually
Years <- 2014:2023
AgeGroups <- c('<5', '5-64', '65+', 'Total')
column_names <- c('Cause',
paste(sort(rep(Years, length(AgeGroups))),AgeGroups))
column_types <- c('text', 'skip', #This will skip the second column in the excel spreadsheet (which doesn't contain any information)
rep('numeric', length(Years) * length(AgeGroups)))
out <- read_xlsx('./Data/Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A8:AP46',
col_names = column_names,
col_types = column_types)
out
#Input data is in ugly format, so I need to label columns somewhat manually
Years <- 2014:2023
AgeGroups <- c('<5', '5-64', '65+', 'Total')
column_names <- c('Cause',
paste(sort(rep(Years, length(AgeGroups))),AgeGroups))
column_types <- c('text', 'skip', #This will skip the second column in the excel spreadsheet (which doesn't contain any information)
rep('numeric', length(Years) * length(AgeGroups)))
out <- read_xlsx('./Data/Causes of Death data.xlsx',
sheet = 'Table 1', range = 'A8:AP46',
col_names = column_names,
col_types = column_types)
out <- out %>%
#Convert to long form data
pivot_longer(-Cause, names_sep = ' ',
values_to = 'Deaths',
names_to = c("Year", "AgeGroup")) %>%
#Extract out cause of death code
mutate(CauseLong = Cause,
Cause = str_extract(CauseLong,'([^\\s]+)') %>% str_trim(),
Cause = ifelse(nchar(Cause) == 4, # include a . for codes of length 4
paste(substr(Cause,1,3), substr(Cause,4,4),sep = '.'),
Cause)
)%>%
#sum over years
group_by(AgeGroup,Cause) %>%
summarise(Count = sum(Deaths))
AusPop <- getAusPopAgeGroup() %>%
subset(Year %in% Years) %>%
group_by(AgeGroup) %>%
summarise(PersonYears = sum(Persons))
warning("Reported perinatal deaths due to Listeria have not been added in, ",
"but were in previous models. Check that this doesn't need to be fixed")
# Calculate as rate per person per year
out <- out %>%
merge(AusPop) %>%
mutate(Rate = Count/PersonYears) %>%
subset(AgeGroup != 'Total')
out
column_names
source("./RFiles/Distributions.R")
source("./RFiles/ClassDefinitions.R")
source("./RFiles/Diseases.R")
source("./RFiles/loadData.R")
source('./RFiles/summaryFunctions.R')
source("./RFiles/estimationFunctions.R")
Deaths <- getABSDeaths()
source("./RFiles/Distributions.R")
source("./RFiles/ClassDefinitions.R")
source("./RFiles/Diseases.R")
source("./RFiles/loadData.R")
source('./RFiles/summaryFunctions.R')
source("./RFiles/estimationFunctions.R")
Deaths <- getABSDeaths()
Deaths
MissedDaysGastro <- getMissedDaysGastro()
FrictionRates <- getFrictionRates()
Workforce <- getWorkforceAssumptions() ##What year is this for and does it need to change by year?
source("./RFiles/Distributions.R")
source("./RFiles/ClassDefinitions.R")
source("./RFiles/Diseases.R")
source("./RFiles/loadData.R")
source('./RFiles/summaryFunctions.R')
source("./RFiles/estimationFunctions.R")
#Load all the data and assumptions
NNDSSIncidenceAgegroup <- getCasesNNDSSAgeGroup() %>% subset(Disease != "STEC") #STEC is in the dataset, but quality of state surveillance deemed better.
StateIncidenceAgeGroup <- getCasesStateAgeGroup()
NotificationsAgeGroup <- bind_rows(NNDSSIncidenceAgegroup,StateIncidenceAgeGroup)
AusPopAgegroup <- getAusPopAgeGroup() #Population by year for the 3 broad age-groups
AusPopSingleYear <- getAusPopSingleYearAge() # Population by year for every age
Hospitalisations <- getHospitalisationsAgeGroup()
help("read_excel")
Hospitalisations <- getHospitalisationsAgeGroup()
Hospitalisations <- getHospitalisationsAgeGroup()
Costs <- getCosts()
VSL <- getValueStatisticalLife()
Deaths <- getABSDeaths()
MissedDaysGastro <- getMissedDaysGastro()
FrictionRates <- getFrictionRates()
Workforce <- getWorkforceAssumptions() ##What year is this for and does it need to change by year?
checkMissingCodes <- function(field, datacodes, action = stop){
UsedCodes <- map(c(PathogenAssumptions, SequelaeAssumptions), ~.x[[field]]) %>% unlist %>% unique
AllCodes <- datacodes %>% unique
MissingCodes <- setdiff(UsedCodes,AllCodes)
if(length(MissingCodes)){
message <- paste0('Some of the ', field, ' required by the model are missing from the data :\n   ',
paste(MissingCodes, collapse = '\n   '))
action(message)
}
}
checkSurplusCodes <- function(field, datacodes, action = stop){
UsedCodes <- map(c(PathogenAssumptions, SequelaeAssumptions), ~.x[[field]]) %>% unlist %>% unique
AllCodes <- datacodes %>% unique
SurplusCodes <- setdiff(AllCodes,UsedCodes)
if(length(SurplusCodes)){
warning('Some of the ', field, ' provided in the data are not used in the model:\n   ',
paste(SurplusCodes, collapse = '\n   '))
}
}
checkMissingCodes('mortCodes', Deaths$Cause, action = warning)
checkSurplusCodes('mortCodes', Deaths$Cause, action = warning)
checkSurplusCodes <- function(field, datacodes, action = stop){
UsedCodes <- map(c(PathogenAssumptions, SequelaeAssumptions), ~.x[[field]]) %>% unlist %>% unique
AllCodes <- datacodes %>% unique
SurplusCodes <- setdiff(AllCodes,UsedCodes)
if(length(SurplusCodes)){
action('Some of the ', field, ' provided in the data are not used in the model:\n   ',
paste(SurplusCodes, collapse = '\n   '))
}
}
checkSurplusCodes('mortCodes', Deaths$Cause, action = warning)
checkSurplusCodes('mortCodes', Deaths$Cause, action = stop)
checkMissingCodes('mortCodes', Deaths$Cause, action = stop)
#This second check is perhaps not needed for the hospitalisation data, as this
#dataset only has rows if there are any hospitalisations recorded (there are no
#rows with zero separations). If the model finds no rows it already interprets
#as no seperations, so perhaps we need a seperate check to see if input codes
#are valid in the future
checkMissingCodes('hospCodes', Hospitalisations$DC4D, action = warning)
Hospitalisations$Year %>% unique
Hospitalisations$DC4D %>% unique()
